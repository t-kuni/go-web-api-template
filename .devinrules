# このリポジトリについて

* Devinで使用する設定ファイル
* ベースプロジェクト： Go Web API
* アーキテクチャ： オニオンアーキテクチャ
* 主要技術： Go, ent, go-swagger

# コマンド

* `make generate`
  * ent/schema内の*.goに基づいて、entフォルダ配下にコードを生成します。
  * swagger.ymlに基づいてrestapiフォルダ配下にコードを生成します
  * モックファイルの作成
* `make test`
  * テストコードを実行します
* `git add -A && GIT_PAGER=cat git diff HEAD`
  * 現在の変更状態を確認する

# フォルダ構成

* application/handler
    * APIのハンドラーが格納されています。
    * 各APIのドメインロジックをここに記述します
    * ファイル名と構造体名は `メソッド + エンドポイント` とする
        * 例
            * `GET /v1/companies/{id}/users` なら `getCompaniesUsers`
            * `POST /v1/companies/{id}/users/{id}` なら `postCompaniesUser`
    * フォルダを作成せず、フラットに配置してください
* domain/service
    * 複数のAPIで共有するドメインロジックをここに記述します
    * interfaceもセットで定義します（必要に応じてモックに差し替えられるようにするため）
    * ファイル名と構造体名は `操作対象のリソース名 + 動詞 + Service` とする
* infrastructure
    * 副作用を扱う実装をここに配置します。
    * ドメインロジックは含めないこと
* domain/infrastructure
    * 前述のinfrastructureのインターフェースをここに配置します
* ent/schema
  * DBのスキーマ定義が格納されています。
* resetapi/configure_app.go
  * APIのハンドラーとswagger.ymlに基づいて生成されたコードをマッピングします。
* swagger.yml
  * OpenAPI定義です。この定義に従ってAPIを実装してください。

# Devinの作業基本方針

* 作業の計画を立てる前にmake generateを実行してください。
    * エラーが発生する場合は、作業を中断し指示者に確認してください。
* swagger.ymlとent/schema配下は、特に指定が無い場合は参照のみとし、編集しないでください（指示者が編集します）
    * 編集する必要が発生した場合は、作業を中断し指示者に確認してください。
* Devinが理解できない部分がある場合は、作業を中断し指示者に確認してください。
* コードベースの分析が完了したら、計画を立ててから実装を開始してください。

# コーディングルール

* コードを書く際は各レイヤの類似のファイルを参考にすること
* 数値型には精度を明示すること
* entを用いたDBアクセスは副作用であるが、例外的にapplication/handlerに記述してよい
    * 但し、DBアクセス部分は関数に切り出すこと（１つのSQL文に対して１つの関数を定義する）
* 指示と関係のないリファクタリングはしないでください
* 既存のコードスタイルを尊重し、一貫性を保ってください

# エラーハンドリング

* 基本的には発生したerrorをeris.Wrapして返すだけで良いです
* eris.Wrapの第二引数は空文字で良いです
* エラーメッセージは具体的かつ明確にしてください

# テストガイドライン

* テストコードはDRYにしなくてよいです
    * 例：変数に入れて使いまわすよりリテラル値で書かれていた方が読みやすい
* APIを追加した場合、最低限、正常系１パターンのテストコードを作成すること
* application/handlerにテストコードを作成し、すべてのレイヤを一気通貫でテストする
    * e2eチックにAPIの振る舞いを検証する
    * DBはモック化しない(docker-composeによってテスト用DBをが起動しています)
    * DIによって自動的にテスト用の接続が使われます（テストケース終了時に自動的にロールバックされる）
    * DB接続以外の副作用はモック化する

# Devin固有の機能

* セマンティック検索を活用して、コードベースの理解を深めてください
* LSPコマンドを使用して、シンボルの定義や参照を調べてください
* 複雑なタスクは小さな単位に分割して取り組んでください
* 作業前に十分な情報収集を行い、計画を立ててから実装を開始してください
* 作業中に不明点が生じた場合は、ユーザーに質問してください
