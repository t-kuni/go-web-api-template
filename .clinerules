# 本リポジトリについて

* Web APIを開発している
* 言語： Go
* アーキテクチャ： オニオンアーキテクチャ
* ORM： ent
* go-swaggerを使用してswagger.ymlからAPIのコードを生成

# コマンド

* `make generate`
  * ent/schema内の*.goに基づいて、entフォルダ配下にコードを生成します。
  * swagger.ymlにrestapiフォルダ配下にコードを生成します
  * モックファイルの作成
* `make test`
    * テストコードを実行します

# フォルダ構成

* application/handler
    * APIのハンドラーが格納されています。
    * 各APIのドメインロジックをここに記述します
    * ファイル名と構造体名は `メソッド + エンドポイント` とする
        * 例
            * `GET /v1/companies/{id}/users` なら `getCompaniesUsers`
            * `POST /v1/companies/{id}/users/{id}` なら `postCompaniesUser`
* domain/service
    * 複数のAPIで共有するドメインロジックをここに記述します
    * interfaceもセットで定義します（必要に応じてモックに差し替えられるようにするため）
    * ファイル名と構造体名は `操作対象のリソース名 + 動詞 + Service` とする
        * 例
            * userRegisterService
            * emailSendService
        * 目的：責務を明確にするため
    * interfaceのコメントgo docに以下を記載すること
        * 何に対してどういう処理を行うサービス、メソッドなのか
        * どういうときに使うことを想定しているのか
* infrastructure
    * 副作用を扱う実装をここに配置します。
    * ドメインロジックは含めないこと
* domain/infrastructure
    * 前述のinfrastructureのインターフェースをここに配置します
* ent/schema
  * DBのスキーマ定義が格納されています。
* resetapi/configure_app.go
  * APIのハンドラーとswagger.ymlに基づいて生成されたコードをマッピングします。

# コーディングルール

* コードを書く際は各レイヤの類似のファイルを参考にすること
* 数値型には精度を明示すること

# エラーハンドリング

* 基本的には発生したerrorをeris.Wrapして返すだけで良いです
* eris.Wrapの第二引数は空文字で良いです

# テストガイドライン

* application/handlerにテストコードを作成し、すべてのレイヤを一気通貫でテストする
    * e2eチックにAPIの振る舞いを検証する
    * DBはモック化しない(docker-composeによってテスト用DBをが起動しています)
    * DIによって自動的にテスト用の接続が使われます（テストケース終了時に自動的にロールバックされる）
    * DB接続以外の副作用はモック化する
* モックの作り方
    * domain/infrastructureのファイルには以下を含めること（モックを生成するのに必要）
    * interfaceを記述したファイルには以下のコメントを含めること
        * `//go:generate mockgen -source=$GOFILE -destination=${GOFILE}_mock.go -package=$GOPACKAGE`
        * これにより make generate コマンドでモックファイルが生成されます
        * 主に `domain/infrastructure` と `domain/service` 配下のファイルに記載することになります
